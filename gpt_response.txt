Here is a solution to create a command-line to-do list manager in Python, complete with a simple code example using Python's `argparse` for command-line argument handling.

### Explanation

The to-do list manager is designed to be a simple command-line tool that allows users to manage tasks with basic functionalities such as adding, removing, viewing, and marking tasks as completed. The code uses a class to manage tasks and Python's `argparse` for handling command-line inputs. Users can interact with the tool using commands like `add`, `remove`, `view`, and `complete`.

### Code

```python
import argparse

class TodoList:
    def __init__(self):
        self.tasks = []

    def add_task(self, description):
        self.tasks.append({'description': description, 'completed': False})
        print(f"Added task: {description}")

    def remove_task(self, index):
        if 0 <= index < len(self.tasks):
            removed_task = self.tasks.pop(index)
            print(f"Removed task: {removed_task['description']}")
        else:
            print(f"Task index {index} is out of range.")

    def view_tasks(self):
        if not self.tasks:
            print("No tasks available.")
        for i, task in enumerate(self.tasks):
            status = "Done" if task['completed'] else "Pending"
            print(f"{i}: {task['description']} [{status}]")

    def complete_task(self, index):
        if 0 <= index < len(self.tasks):
            self.tasks[index]['completed'] = True
            print(f"Marked task as completed: {self.tasks[index]['description']}")
        else:
            print(f"Task index {index} is out of range.")

def main():
    parser = argparse.ArgumentParser(description="Simple To-Do List Manager")
    parser.add_argument('command', choices=['add', 'remove', 'view', 'complete'])
    parser.add_argument('arguments', nargs='*', help="Arguments for the command")

    args = parser.parse_args()

    todo = TodoList()

    if args.command == 'add':
        todo.add_task(" ".join(args.arguments))
    elif args.command == 'remove':
        todo.remove_task(int(args.arguments[0]))
    elif args.command == 'view':
        todo.view_tasks()
    elif args.command == 'complete':
        todo.complete_task(int(args.arguments[0]))

if __name__ == "__main__":
    main()
```

### Installation

To run this program, you need to have Python 3.x installed. You can also create a virtual environment, though it is optional for this script since there are no external dependencies. If you choose to create a virtual environment, here are the steps:

```bash
# Install Python 3.x from https://www.python.org/downloads/

# Create a virtual environment (optional but recommended):
python -m venv todo_env

# Activate the virtual environment:
# On macOS/Linux:
source todo_env/bin/activate
# On Windows:
todo_env\Scripts\activate
```

No additional Python packages are required as the script uses only the standard library.

With this setup, you can manage your to-do tasks right from the command line. The script handles basic task management operations and provides a foundation for further enhancements, such as task categorization or progress tracking.